(1/15/21)
looping is a localstorage thing. Also cc should be a local storage thing for vimeo. We have to get these things from localstorage whenever the player is loaded. Save it as vimeolooping, not looping.

consider setting an interval whenever a player becomes host. Every 10 seconds, send everyone in the room your time. If they're behind by 5 seconds, jump them up to your time. Before sending this message out, check if you're still host. If not, don't do it, and delete the interval.

consider putting the code for updating the ui in the buddyviewer class. That way all child classes can just call that from their video timeupdate code, and you don't have to have that in the scripts tag handling things. It'll all be custom to whatever player is playing.

(1/13/21)
Option 1: Create a BuddyViewer global object. It has a player property, and methods that interact with that player based on whatever its videoSource property is.

Make a BuddyViewer class, and make child classes for each of the types of players. Those child classes will implement their own methods. Our global BuddyViewer object will hold an instance of one of the child classes.


(1/7/21)
Layout for room list item:

|ROOM_LOGO| |THUMBNAIL|  |ROOM_NAME||USER_COUNT||HOST_COUNTRY_FLAG|
|ROOM_LOGO| |THUMBNAIL|  |DESCRIPTION|         |LOCK/UNLOCK SYMBOL|

When you hover over the thumbnail it shows a box with the video name,
description, and a progressbar set to their saved timestamp.

(12/2/20)

"Progress" is used to get the buffer data from the video. Is usefull to create some preloader buffer bar to you know how much video your browser is already downloaded. (for html5 video)


(11/21/20)

(11/20/20)
Watch2Gether constantly asks you to reconfirm your room in part because youtube requires a user to interact for the "autoplay" functionality to work. It appears youtube's API considers activating the video via javascript to be "autoplay".

player.playVideo()

(11/17/20)
This is how you check if the user has reached this page after a browser reload:
const perfEntries = performance.getEntriesByType("navigation");
    for(const perf of perfEntries){
        if (perf.type == "reload"){
            alert("YES!!");
        }
    }


(11/16/20)
nodemon --exec npm run babel-node -- ./server.js

nodemon --exec babel-node -- ./server.js



(11/7/20) These are the logs from our last run. Note how nameToRelease seems to for some reason have the name of the previous messenger. Is that happening on the client side or the server side? Likely server side. Are there global variables I'm not aware of? Is there something going on where the name is not being updated because of certain if conditions?

LOGS:
NEW MSG(f18ckt): hi from vnc
Is ANON-f18ckt available?: true
Can use!!: true
===============
NEW MSG(5lx0ll): hi from pc
Is ANON-5lx0ll available?: true
Can use!!: true
===============
NEW MSG(f18ckt): hi again from vnc
Is vnc available?: true
NAME TO RELEASE: ANON-5lx0ll
NAME WE'RE LOOKING AT: undefined
NAME TO RELEASE: ANON-5lx0ll
NAME WE'RE LOOKING AT: ANON-f18ckt
NAME TO RELEASE: ANON-5lx0ll
NAME WE'RE LOOKING AT: ANON-5lx0ll
TAKEN NAME: ANON-5lx0ll Name to release: ANON-5lx0ll
Can use!!: true
===============